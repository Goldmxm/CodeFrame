package com.meizu.code.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.meizu.code.greendao.utils.BeanConverter;
import java.util.List;

import com.meizu.code.greendao.bean.BookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_BEAN".
*/
public class BookBeanDao extends AbstractDao<BookBean, Long> {

    public static final String TABLENAME = "BOOK_BEAN";

    /**
     * Properties of entity BookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Count = new Property(1, int.class, "count", false, "COUNT");
        public final static Property Start = new Property(2, int.class, "start", false, "START");
        public final static Property Total = new Property(3, int.class, "total", false, "TOTAL");
        public final static Property Books = new Property(4, String.class, "books", false, "BOOKS");
    }

    private final BeanConverter booksConverter = new BeanConverter();

    public BookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"COUNT\" INTEGER NOT NULL ," + // 1: count
                "\"START\" INTEGER NOT NULL ," + // 2: start
                "\"TOTAL\" INTEGER NOT NULL ," + // 3: total
                "\"BOOKS\" TEXT);"); // 4: books
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getCount());
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getTotal());
 
        List books = entity.getBooks();
        if (books != null) {
            stmt.bindString(5, booksConverter.convertToDatabaseValue(books));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getCount());
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getTotal());
 
        List books = entity.getBooks();
        if (books != null) {
            stmt.bindString(5, booksConverter.convertToDatabaseValue(books));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookBean readEntity(Cursor cursor, int offset) {
        BookBean entity = new BookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // count
            cursor.getInt(offset + 2), // start
            cursor.getInt(offset + 3), // total
            cursor.isNull(offset + 4) ? null : booksConverter.convertToEntityProperty(cursor.getString(offset + 4)) // books
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCount(cursor.getInt(offset + 1));
        entity.setStart(cursor.getInt(offset + 2));
        entity.setTotal(cursor.getInt(offset + 3));
        entity.setBooks(cursor.isNull(offset + 4) ? null : booksConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
